#!/bin/sh
export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

########    USAGE    ########    
usage() {
    printf "USAGE:  tradelog [-h|--help] [FILTERS] [COMMAND] [LOG [LOG2 [...]]
            FILTERS:
                -a DATETIME     Records with DATE after DATETIME
                -b DATETIME     Records with DATE before DATETIME
                -t TICKER       Records with TICKER
                -w WIDTH        Set WIDTH of longest line

            COMMAND:
                list-tick       Prints list of TICKERs
                profit          Prints profit from closed positions (suma SELL - suma BUY)
                pos             Prints list of values of currently held positions in descending order 
                last-price      Prints last known price of TICKER 
                hist-ord        Prints histogram of the number of transactions according to TICKER 
                graph-pos       Prints list of values of held positions according to TICKER\n"
}

AFTER_TIME_FILTER=""                        # FILTER for records after set date
BEFORE_TIME_FILTER="9999-99-99 99:99:99"    # FILTER for records before set date
TICKS=""                                    # FILTER for records with TICKS
WIDTH=""                                    # FILTER for max line length
COMMAND=""                                  # COMMAND
INPUT=""                                    # FILE/STDIN

while [ $# -gt 0 ]; do
    case "$1" in
    # FILTER 
    -a) if [ "$2" \> "$AFTER_TIME_FILTER" ]; then AFTER_TIME_FILTER=$2; fi; shift 2;;
    -b) if [ "$2" \< "$BEFORE_TIME_FILTER" ]; then BEFORE_TIME_FILTER=$2; fi; shift 2;;
    -t) if [ -z "$TICKS" ]; then TICKS="$2"; else TICKS="$TICKS\|$2"; fi; shift 2;;
    -w) WIDTH="$2"; shift 2;;

    # COMMAND
    list-tick | profit | pos | last-price | hist-ord | graph-pos) 
    if [ -z "$COMMAND" ]; then COMMAND="$1"; else printf "Called with more than one command.\n"; usage; exit 1; fi; shift 1 ;;

    # USAGE
    -h | --help) usage; exit 0;;
    # FILES
    *.log) INPUT="$INPUT\n$( cat $1 )"; shift 1;;
    *.gz) INPUT="$INPUT\n$( gzip -d -c $1 )"; shift 1;;
    
    # OTHER
    *) echo "Unavailable choice: '$1' - check input."; usage; exit 1;;
    esac
done

########    FILTERS    ########
TICKER_FILTER="grep '^.*;\($TICKS\);'"
DATETIME_FILTER="awk -F ';' '{ if ("\"$AFTER_TIME_FILTER"\"<\$1 && "\"$BEFORE_TIME_FILTER"\">"\$1") print }'"
if [ -z "$TICKS" ]; then    
    FILTERED_DATA='echo "$INPUT" | eval "$DATETIME_FILTER | sort"'
    else 
    FILTERED_DATA='echo "$INPUT" | eval "$TICKER_FILTER" | eval "$DATETIME_FILTER | sort"'
fi

########    COMMAND    ########
case $COMMAND in
    #print all tickers together alphabetickly ordered
    list-tick) eval "$FILTERED_DATA" | sort -u -s -t ';' -k 2,2 | awk -F ';' '{print $2}' ;;

    #for all tickers together sell - buy
    profit) eval "$FILTERED_DATA" | sort -s -t ';' -k 2,3 | awk -F ';' 'BEGIN{ profit=0 } {if($3=="buy") { profit-=$4*$6 } else { profit+=$4*$6 }} END{ printf "%.2f",profit }';;

    #for all tickers buy - sell group by ticker #? nevím jak to urobit #chyba v tom že neukládám tick jako v last-price
    pos) eval "$FILTERED_DATA" | sort -s -t ';' -k 2,3 | awk -F ';' 'BEGIN{profit=0} {if(NR==1) { tick=$2; if($3=="buy") { profit+=$4*$6 } else { profit-=$4*$6 }} else { if(tick==$2) { if($3=="buy") { profit+=$4*$6 } else { profit-=$4*$6 }} else { printf "%-10s:%12.2f\n",$2,profit; tick=$2; profit=0; if($3=="buy") { profit+=$4*$6 } else { profit-=$4*$6 }}}} END{printf "%-10s:%12.2f\n",$2,profit}' | sort -s -t ':' -k 2,2 -n -r;;

    last-price) eval "$FILTERED_DATA" | sort -t ';' -k 2,2 -k 1,1 | awk -F ';' '{ if(NR==1) { tick=$2; time=$1; price=$4; } else { if(tick!=$2) { printf "%-10s:%7.2f\n",tick,price; time=$1; tick=$2; price=$4; } else {price=$4;} } } END {printf "%-10s:%7.2f\n",tick,price;}';;

    hist-ord) eval "$FILTERED_DATA" | sort -t ';' -k 2,2 | awk -F ';' 'BEGIN { sum=0; msg="" } { if(NR==1) { tick=$2; sum+=1 } else { if(tick!=$2) { printf "%-10s: ", tick; for(i=1; i<=sum; i++) { msg="#"msg }; printf "%s\n", msg; tick=$2; sum=1; } else { sum+=1; msg=""; } } } END { printf "%-10s: ", tick; for(i=1; i<=sum; i++) { msg="#"msg }; printf "%s\n", msg; }' ;;
    #"%-10s:$format", tick | tr " " "#"
    #format="%${x}s"
    #printf "$format" | tr " " "#"
    graph-pos) eval "$FILTERED_DATA" ;;

    "") eval "$FILTERED_DATA" ;;
esac